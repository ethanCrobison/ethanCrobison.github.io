I"@<p>Here are the contents of my .zshrc:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Source Prezto</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ZDOTDIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="k">}</span><span class="s2">/.zprezto/init.zsh"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">source</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ZDOTDIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="k">}</span><span class="s2">/.zprezto/init.zsh"</span>
<span class="k">fi

</span>autoload <span class="nt">-Uz</span> promptinit
promptinit

<span class="c"># TODO different prompts on different machines</span>
prompt minimal

<span class="c"># Extra initialization &amp;c.</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>fasd <span class="nt">--init</span> auto<span class="si">)</span><span class="s2">"</span>

<span class="nb">export </span><span class="nv">VISUAL</span><span class="o">=</span>nvim
<span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$VISUAL</span><span class="s2">"</span>

<span class="c"># Run tmux</span>
<span class="o">[</span> <span class="nt">-z</span> <span class="nv">$TMUX</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span> tmux attach <span class="o">||</span> <span class="nb">exec </span>tmux new-session <span class="nt">-s</span> general <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="o">}</span>
tmux <span class="nb">source</span> ~/.tmux.conf

<span class="c"># Aliases</span>
<span class="nb">alias </span><span class="nv">vim</span><span class="o">=</span>nvim
<span class="nb">alias </span><span class="nv">makepass</span><span class="o">=</span><span class="s1">'curl -X GET -G https://www.random.org/passwords/ \
	-d "num=1" \
	-d "len=24" \
	-d "format=plain" \
	-d "rnd=new" | pbcopy'</span>
<span class="nb">alias </span><span class="nv">polo</span><span class="o">=</span><span class="s2">". polo"</span>

<span class="c"># Ruby</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/opt/ruby/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">alias </span><span class="nv">js</span><span class="o">=</span><span class="s2">"bundle exec jekyll server"</span>

<span class="c"># Texlive</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/texlive/2020/bin/x86_64-darwin/:</span><span class="nv">$PATH</span><span class="s2">"</span>

<span class="c"># Dotnet BS</span>
<span class="nb">export </span><span class="nv">DOTNET_CLI_TELEMETRY_OPTOUT</span><span class="o">=</span>1

</code></pre></div></div>

<hr />

<p>It’s consistent across platforms, because I maintain a <a href="https://github.com/ethanrobison/dotfiles">repo of all of
my dotfiles</a> and then create a symlink to the repo directory, like
so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ln -s ~/path/to/dotfiles/.zsrhc ~/.zsrhc
</code></pre></div></div>

<p>What follows is a blow-by-blow explaining each line.</p>

<h2 id="prezto">Prezto</h2>

<p><a href="https://github.com/sorin-ionescu/prezto">Prezto</a> is a zsh framework that makes the zsh experience <em>vastly</em>
better. I highly recommend it, especially if you’re not using zsh and
all of its wonderful features already.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="o">[[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ZDOTDIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="k">}</span><span class="s2">/.zprezto/init.zsh"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></pre></div></div>

<p>In bash and other shells, <code class="language-plaintext highlighter-rouge">"${VAR:-$OTHERVAR}"</code> expands to <code class="language-plaintext highlighter-rouge">$VAR</code>,
unless <code class="language-plaintext highlighter-rouge">$VAR</code> is unset or empty, in which case it expands to <code class="language-plaintext highlighter-rouge">$OTHERVAR</code>
(see <a href="https://wiki.bash-hackers.org/syntax/pe#use_a_default_value">this explanation on parameter expansion</a>). Therefore,
<code class="language-plaintext highlighter-rouge">"${ZDOTDIR:-$HOME}"</code> is either one’s <code class="language-plaintext highlighter-rouge">$ZDOTDIR</code> or one’s <code class="language-plaintext highlighter-rouge">$HOME</code>
variable, which then gets a <code class="language-plaintext highlighter-rouge">/.zprezto/init.zsh</code> tacked on.</p>

<p><code class="language-plaintext highlighter-rouge">-s</code>, (within the <code class="language-plaintext highlighter-rouge">[[ ]]</code>, which are the <a href="https://stackoverflow.com/questions/13542832/difference-between-single-and-double-square-brackets-in-bash">extended format for
conditionals</a>), checks if the file exists <em>and</em> if its contents are
non-zero in length. <a href="http://zsh.sourceforge.net/Doc/Release/Conditional-Expressions.html">Here is an exhaustive list of the various
conditionals and what they do</a>.</p>

<p>All of this together makes for a conditional that checks if there exists
(in one’s home or z dot directory) a non-empty file named
<code class="language-plaintext highlighter-rouge">.zprezto/init.zsh</code>.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">source</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ZDOTDIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="k">}</span><span class="s2">/.zprezto/init.zsh"</span>
</code></pre></div></div>

<p>In this case, if that file does exist, we source it. In short, if this
script can find an appropriate <code class="language-plaintext highlighter-rouge">init.zsh</code> for the zprezto framework,
then it runs it. Simple as that.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    autoload <span class="nt">-Uz</span> promptinit
    promptinit
    prompt minimal
</code></pre></div></div>

<p>These are lines for configuring Prezto’s prompt. There are a bunch of
fancy prompts available, but I stick one of the simpler options so that
I can use this config file on my headless raspberry pi (which doesn’t
have full unicode support).</p>

<h2 id="miscellaneous-configurations">Miscellaneous Configurations</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>fasd <span class="nt">--init</span> auto<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p><a href="https://github.com/clvv/fasd"><code class="language-plaintext highlighter-rouge">fasd</code></a> is an excellent augmentation of the vanilla <code class="language-plaintext highlighter-rouge">cd</code> command. It
sorts files/directories by “frecency” and affords quick access to the
files it predicts you’ll need. This line initializes the utility.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">export </span><span class="nv">VISUAL</span><span class="o">=</span>nvim
    <span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$VISUAL</span><span class="s2">"</span>
</code></pre></div></div>

<p><a href="https://unix.stackexchange.com/questions/73484/how-can-i-set-vi-as-my-default-editor-in-unix#73486">These set my “default” editor to neovim.</a> (<a href="https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference">Bonus explanation on the
difference between <code class="language-plaintext highlighter-rouge">$VISUAL</code> and <code class="language-plaintext highlighter-rouge">$EDITOR</code></a>)</p>

<h2 id="tmux">tmux</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-z</span> <span class="nv">$TMUX</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span> tmux attach <span class="o">||</span> <span class="nb">exec </span>tmux new-session <span class="nt">-s</span> general <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="o">}</span>
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">$TMUX</code> is set, then we’re already somewhere in the tmuxverse and we
shouldn’t create new sessions (nesting tmux sessions is rarely a good
ide). If <code class="language-plaintext highlighter-rouge">$TMUX</code> isn’t set, this either attaches an existing, buried
session (<code class="language-plaintext highlighter-rouge">tmux attach</code>) or creates a new session named “general” (<code class="language-plaintext highlighter-rouge">exec
tmux new-session -s general</code>).</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tmux <span class="nb">source</span> ~/.tmux.conf
</code></pre></div></div>

<p>This sources my tmux config file.
<!-- TODO add the line-by-line for tmux --></p>

<h2 id="aliases">Aliases</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">alias </span><span class="nv">vim</span><span class="o">=</span>nvim
</code></pre></div></div>

<p>This saves me the “trouble” of having to write <code class="language-plaintext highlighter-rouge">nvim</code> instead of <code class="language-plaintext highlighter-rouge">vim</code>.</p>

<!--
```zsh
alias makepass='curl -X GET -G https://www.random.org/passwords/ 	-d "num=1" 	-d "len=24" 	-d "format=plain" 	-d "rnd=new" | pbcopy'
```
-->

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">alias </span><span class="nv">makepass</span><span class="o">=</span><span class="s1">'curl -X GET -G https://www.random.org/passwords/ \
            -d "num=1" \
            -d "len=24" \
            -d "format=plain" 
            -d "rnd=new" | pbcopy'</span>
</code></pre></div></div>

<p>Next, this chonker gets a random password from random.org and puts it into my
system clipboard. It’s currently busted on Windows (where I use the
Windows Linux Subsystem), so I need to account for that at some
juncture.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">alias </span><span class="nv">polo</span><span class="o">=</span><span class="s2">". polo"</span>
</code></pre></div></div>

<p>A while back I wrote a pair of scripts, <code class="language-plaintext highlighter-rouge">marco</code>:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c">#!/bin/zsh</span>

    <span class="nv">val</span><span class="o">=</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>
    <span class="nv">base</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="si">$(</span><span class="nb">readlink</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%N</span><span class="k">}</span><span class="si">)</span><span class="s2">/marco"</span><span class="si">))</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$val</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$base</span><span class="s2">/.polo_value"</span>
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">polo</code>:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c">#!/bin/zsh</span>

    <span class="nv">base</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="si">$(</span><span class="nb">readlink</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%N</span><span class="k">}</span><span class="si">)</span><span class="s2">/marco"</span><span class="si">))</span>
    <span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$base</span><span class="s2">/.polo_value"</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="nv">$file</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">cd</span> <span class="si">$(</span><span class="nb">cat</span> <span class="nv">$file</span><span class="si">)</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"Nothing polo'ed!"</span>
    <span class="k">fi</span>
</code></pre></div></div>

<p>However, calling <code class="language-plaintext highlighter-rouge">cd</code> from within a script only changes the working
directory for the subshell running the script, so one needs to source
the script by calling with <code class="language-plaintext highlighter-rouge">source $SCRIPT</code> or simply <code class="language-plaintext highlighter-rouge">. $SCRIPT</code>. So, I
aliased <code class="language-plaintext highlighter-rouge">polo</code> to source the script, hence: <code class="language-plaintext highlighter-rouge">alias polo=". polo"</code>.</p>

<h2 id="ruby-configurations">Ruby Configurations</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/opt/ruby/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>This includes the <a href="https://brew.sh/">homebrew</a> install of ruby in my path <em>before</em> the
OSX default ruby install, so that programs find it beforehand.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">alias </span><span class="nv">js</span><span class="o">=</span><span class="s2">"bundle exec jekyll server"</span>
</code></pre></div></div>

<p>To test this website, I run the command <code class="language-plaintext highlighter-rouge">bundle exec jekyll server</code>
frequently. This alias just saves me the trouble.</p>

<h2 id="miscellaneous">Miscellaneous</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/texlive/2020/bin/x86_64-darwin/:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>This lets texlive know about my installation. It occurs to me that this
is broken on windows. Ugh. That’s one of the nice things about a page
like this: it lets me see when I’ve goofed something up. It’s like
long-form rubber ducky debugging.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">export </span><span class="nv">DOTNET_CLI_TELEMETRY_OPTOUT</span><span class="o">=</span>1
</code></pre></div></div>

<p>This particular nonsense opts me out dotnet data collection from the
time I faffed around with f# for 20 minutes. A relic, to be sure.</p>

:ET